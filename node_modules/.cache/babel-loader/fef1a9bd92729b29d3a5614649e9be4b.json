{"ast":null,"code":"import { errorPrefix, generatedAttribute } from \"./Utils/Constants.js\";\nimport { executeOnSingleOrMultiple, getLogger, itemFromSingleOrMultiple } from \"../Utils/Utils.js\";\nimport { Container } from \"./Container.js\";\nimport { EventDispatcher } from \"../Utils/EventDispatcher.js\";\nimport { getRandom } from \"../Utils/NumberUtils.js\";\nfunction getItemsFromInitializer(container, map, initializers, force = false) {\n  let res = map.get(container);\n  if (!res || force) {\n    res = [...initializers.values()].map(t => t(container));\n    map.set(container, res);\n  }\n  return res;\n}\nasync function getDataFromUrl(data) {\n  const url = itemFromSingleOrMultiple(data.url, data.index);\n  if (!url) {\n    return data.fallback;\n  }\n  const response = await fetch(url);\n  if (response.ok) {\n    return response.json();\n  }\n  getLogger().error(`${errorPrefix} ${response.status} while retrieving config file`);\n  return data.fallback;\n}\nexport class Engine {\n  constructor() {\n    this._configs = new Map();\n    this._domArray = [];\n    this._eventDispatcher = new EventDispatcher();\n    this._initialized = false;\n    this.plugins = [];\n    this._initializers = {\n      interactors: new Map(),\n      movers: new Map(),\n      updaters: new Map()\n    };\n    this.interactors = new Map();\n    this.movers = new Map();\n    this.updaters = new Map();\n    this.presets = new Map();\n    this.effectDrawers = new Map();\n    this.shapeDrawers = new Map();\n    this.pathGenerators = new Map();\n  }\n  get configs() {\n    const res = {};\n    for (const [name, config] of this._configs) {\n      res[name] = config;\n    }\n    return res;\n  }\n  get version() {\n    return \"3.0.2\";\n  }\n  addConfig(config) {\n    const name = config.name ?? \"default\";\n    this._configs.set(name, config);\n    this._eventDispatcher.dispatchEvent(\"configAdded\", {\n      data: {\n        name,\n        config\n      }\n    });\n  }\n  async addEffect(effect, drawer, refresh = true) {\n    executeOnSingleOrMultiple(effect, type => {\n      !this.getEffectDrawer(type) && this.effectDrawers.set(type, drawer);\n    });\n    await this.refresh(refresh);\n  }\n  addEventListener(type, listener) {\n    this._eventDispatcher.addEventListener(type, listener);\n  }\n  async addInteractor(name, interactorInitializer, refresh = true) {\n    this._initializers.interactors.set(name, interactorInitializer);\n    await this.refresh(refresh);\n  }\n  async addMover(name, moverInitializer, refresh = true) {\n    this._initializers.movers.set(name, moverInitializer);\n    await this.refresh(refresh);\n  }\n  async addParticleUpdater(name, updaterInitializer, refresh = true) {\n    this._initializers.updaters.set(name, updaterInitializer);\n    await this.refresh(refresh);\n  }\n  async addPathGenerator(name, generator, refresh = true) {\n    !this.getPathGenerator(name) && this.pathGenerators.set(name, generator);\n    await this.refresh(refresh);\n  }\n  async addPlugin(plugin, refresh = true) {\n    !this.getPlugin(plugin.id) && this.plugins.push(plugin);\n    await this.refresh(refresh);\n  }\n  async addPreset(preset, options, override = false, refresh = true) {\n    (override || !this.getPreset(preset)) && this.presets.set(preset, options);\n    await this.refresh(refresh);\n  }\n  async addShape(shape, drawer, refresh = true) {\n    executeOnSingleOrMultiple(shape, type => {\n      !this.getShapeDrawer(type) && this.shapeDrawers.set(type, drawer);\n    });\n    await this.refresh(refresh);\n  }\n  clearPlugins(container) {\n    this.updaters.delete(container);\n    this.movers.delete(container);\n    this.interactors.delete(container);\n  }\n  dispatchEvent(type, args) {\n    this._eventDispatcher.dispatchEvent(type, args);\n  }\n  dom() {\n    return this._domArray;\n  }\n  domItem(index) {\n    const dom = this.dom(),\n      item = dom[index];\n    if (!item || item.destroyed) {\n      dom.splice(index, 1);\n      return;\n    }\n    return item;\n  }\n  getAvailablePlugins(container) {\n    const res = new Map();\n    for (const plugin of this.plugins) {\n      plugin.needsPlugin(container.actualOptions) && res.set(plugin.id, plugin.getPlugin(container));\n    }\n    return res;\n  }\n  getEffectDrawer(type) {\n    return this.effectDrawers.get(type);\n  }\n  getInteractors(container, force = false) {\n    return getItemsFromInitializer(container, this.interactors, this._initializers.interactors, force);\n  }\n  getMovers(container, force = false) {\n    return getItemsFromInitializer(container, this.movers, this._initializers.movers, force);\n  }\n  getPathGenerator(type) {\n    return this.pathGenerators.get(type);\n  }\n  getPlugin(plugin) {\n    return this.plugins.find(t => t.id === plugin);\n  }\n  getPreset(preset) {\n    return this.presets.get(preset);\n  }\n  getShapeDrawer(type) {\n    return this.shapeDrawers.get(type);\n  }\n  getSupportedEffects() {\n    return this.effectDrawers.keys();\n  }\n  getSupportedShapes() {\n    return this.shapeDrawers.keys();\n  }\n  getUpdaters(container, force = false) {\n    return getItemsFromInitializer(container, this.updaters, this._initializers.updaters, force);\n  }\n  init() {\n    if (this._initialized) {\n      return;\n    }\n    this._initialized = true;\n  }\n  async load(params) {\n    const id = params.id ?? `tsparticles${Math.floor(getRandom() * 10000)}`,\n      {\n        index,\n        url\n      } = params,\n      options = url ? await getDataFromUrl({\n        fallback: params.options,\n        url,\n        index\n      }) : params.options;\n    let domContainer = params.element ?? document.getElementById(id);\n    if (!domContainer) {\n      domContainer = document.createElement(\"div\");\n      domContainer.id = id;\n      document.body.append(domContainer);\n    }\n    const currentOptions = itemFromSingleOrMultiple(options, index),\n      dom = this.dom(),\n      oldIndex = dom.findIndex(v => v.id.description === id);\n    if (oldIndex >= 0) {\n      const old = this.domItem(oldIndex);\n      if (old && !old.destroyed) {\n        old.destroy();\n        dom.splice(oldIndex, 1);\n      }\n    }\n    let canvasEl;\n    if (domContainer.tagName.toLowerCase() === \"canvas\") {\n      canvasEl = domContainer;\n      canvasEl.dataset[generatedAttribute] = \"false\";\n    } else {\n      const existingCanvases = domContainer.getElementsByTagName(\"canvas\");\n      if (existingCanvases.length) {\n        canvasEl = existingCanvases[0];\n        canvasEl.dataset[generatedAttribute] = \"false\";\n      } else {\n        canvasEl = document.createElement(\"canvas\");\n        canvasEl.dataset[generatedAttribute] = \"true\";\n        domContainer.appendChild(canvasEl);\n      }\n    }\n    if (!canvasEl.style.width) {\n      canvasEl.style.width = \"100%\";\n    }\n    if (!canvasEl.style.height) {\n      canvasEl.style.height = \"100%\";\n    }\n    const newItem = new Container(this, id, currentOptions);\n    if (oldIndex >= 0) {\n      dom.splice(oldIndex, 0, newItem);\n    } else {\n      dom.push(newItem);\n    }\n    newItem.canvas.loadCanvas(canvasEl);\n    await newItem.start();\n    return newItem;\n  }\n  loadOptions(options, sourceOptions) {\n    for (const plugin of this.plugins) {\n      plugin.loadOptions(options, sourceOptions);\n    }\n  }\n  loadParticlesOptions(container, options, ...sourceOptions) {\n    const updaters = this.updaters.get(container);\n    if (!updaters) {\n      return;\n    }\n    for (const updater of updaters) {\n      updater.loadOptions && updater.loadOptions(options, ...sourceOptions);\n    }\n  }\n  async refresh(refresh = true) {\n    if (!refresh) {\n      return;\n    }\n    this.dom().forEach(t => t.refresh());\n  }\n  removeEventListener(type, listener) {\n    this._eventDispatcher.removeEventListener(type, listener);\n  }\n  setOnClickHandler(callback) {\n    const dom = this.dom();\n    if (!dom.length) {\n      throw new Error(`${errorPrefix} can only set click handlers after calling tsParticles.load()`);\n    }\n    for (const domItem of dom) {\n      domItem.addClickHandler(callback);\n    }\n  }\n}","map":{"version":3,"names":["errorPrefix","generatedAttribute","executeOnSingleOrMultiple","getLogger","itemFromSingleOrMultiple","Container","EventDispatcher","getRandom","getItemsFromInitializer","container","map","initializers","force","res","get","values","t","set","getDataFromUrl","data","url","index","fallback","response","fetch","ok","json","error","status","Engine","constructor","_configs","Map","_domArray","_eventDispatcher","_initialized","plugins","_initializers","interactors","movers","updaters","presets","effectDrawers","shapeDrawers","pathGenerators","configs","name","config","version","addConfig","dispatchEvent","addEffect","effect","drawer","refresh","type","getEffectDrawer","addEventListener","listener","addInteractor","interactorInitializer","addMover","moverInitializer","addParticleUpdater","updaterInitializer","addPathGenerator","generator","getPathGenerator","addPlugin","plugin","getPlugin","id","push","addPreset","preset","options","override","getPreset","addShape","shape","getShapeDrawer","clearPlugins","delete","args","dom","domItem","item","destroyed","splice","getAvailablePlugins","needsPlugin","actualOptions","getInteractors","getMovers","find","getSupportedEffects","keys","getSupportedShapes","getUpdaters","init","load","params","Math","floor","domContainer","element","document","getElementById","createElement","body","append","currentOptions","oldIndex","findIndex","v","description","old","destroy","canvasEl","tagName","toLowerCase","dataset","existingCanvases","getElementsByTagName","length","appendChild","style","width","height","newItem","canvas","loadCanvas","start","loadOptions","sourceOptions","loadParticlesOptions","updater","forEach","removeEventListener","setOnClickHandler","callback","Error","addClickHandler"],"sources":["/Users/josh/Desktop/Portfolio/jjgarcilazo.github.io/node_modules/@tsparticles/engine/browser/Core/Engine.js"],"sourcesContent":["import { errorPrefix, generatedAttribute } from \"./Utils/Constants.js\";\nimport { executeOnSingleOrMultiple, getLogger, itemFromSingleOrMultiple } from \"../Utils/Utils.js\";\nimport { Container } from \"./Container.js\";\nimport { EventDispatcher } from \"../Utils/EventDispatcher.js\";\nimport { getRandom } from \"../Utils/NumberUtils.js\";\nfunction getItemsFromInitializer(container, map, initializers, force = false) {\n    let res = map.get(container);\n    if (!res || force) {\n        res = [...initializers.values()].map((t) => t(container));\n        map.set(container, res);\n    }\n    return res;\n}\nasync function getDataFromUrl(data) {\n    const url = itemFromSingleOrMultiple(data.url, data.index);\n    if (!url) {\n        return data.fallback;\n    }\n    const response = await fetch(url);\n    if (response.ok) {\n        return response.json();\n    }\n    getLogger().error(`${errorPrefix} ${response.status} while retrieving config file`);\n    return data.fallback;\n}\nexport class Engine {\n    constructor() {\n        this._configs = new Map();\n        this._domArray = [];\n        this._eventDispatcher = new EventDispatcher();\n        this._initialized = false;\n        this.plugins = [];\n        this._initializers = {\n            interactors: new Map(),\n            movers: new Map(),\n            updaters: new Map(),\n        };\n        this.interactors = new Map();\n        this.movers = new Map();\n        this.updaters = new Map();\n        this.presets = new Map();\n        this.effectDrawers = new Map();\n        this.shapeDrawers = new Map();\n        this.pathGenerators = new Map();\n    }\n    get configs() {\n        const res = {};\n        for (const [name, config] of this._configs) {\n            res[name] = config;\n        }\n        return res;\n    }\n    get version() {\n        return \"3.0.2\";\n    }\n    addConfig(config) {\n        const name = config.name ?? \"default\";\n        this._configs.set(name, config);\n        this._eventDispatcher.dispatchEvent(\"configAdded\", { data: { name, config } });\n    }\n    async addEffect(effect, drawer, refresh = true) {\n        executeOnSingleOrMultiple(effect, (type) => {\n            !this.getEffectDrawer(type) && this.effectDrawers.set(type, drawer);\n        });\n        await this.refresh(refresh);\n    }\n    addEventListener(type, listener) {\n        this._eventDispatcher.addEventListener(type, listener);\n    }\n    async addInteractor(name, interactorInitializer, refresh = true) {\n        this._initializers.interactors.set(name, interactorInitializer);\n        await this.refresh(refresh);\n    }\n    async addMover(name, moverInitializer, refresh = true) {\n        this._initializers.movers.set(name, moverInitializer);\n        await this.refresh(refresh);\n    }\n    async addParticleUpdater(name, updaterInitializer, refresh = true) {\n        this._initializers.updaters.set(name, updaterInitializer);\n        await this.refresh(refresh);\n    }\n    async addPathGenerator(name, generator, refresh = true) {\n        !this.getPathGenerator(name) && this.pathGenerators.set(name, generator);\n        await this.refresh(refresh);\n    }\n    async addPlugin(plugin, refresh = true) {\n        !this.getPlugin(plugin.id) && this.plugins.push(plugin);\n        await this.refresh(refresh);\n    }\n    async addPreset(preset, options, override = false, refresh = true) {\n        (override || !this.getPreset(preset)) && this.presets.set(preset, options);\n        await this.refresh(refresh);\n    }\n    async addShape(shape, drawer, refresh = true) {\n        executeOnSingleOrMultiple(shape, (type) => {\n            !this.getShapeDrawer(type) && this.shapeDrawers.set(type, drawer);\n        });\n        await this.refresh(refresh);\n    }\n    clearPlugins(container) {\n        this.updaters.delete(container);\n        this.movers.delete(container);\n        this.interactors.delete(container);\n    }\n    dispatchEvent(type, args) {\n        this._eventDispatcher.dispatchEvent(type, args);\n    }\n    dom() {\n        return this._domArray;\n    }\n    domItem(index) {\n        const dom = this.dom(), item = dom[index];\n        if (!item || item.destroyed) {\n            dom.splice(index, 1);\n            return;\n        }\n        return item;\n    }\n    getAvailablePlugins(container) {\n        const res = new Map();\n        for (const plugin of this.plugins) {\n            plugin.needsPlugin(container.actualOptions) && res.set(plugin.id, plugin.getPlugin(container));\n        }\n        return res;\n    }\n    getEffectDrawer(type) {\n        return this.effectDrawers.get(type);\n    }\n    getInteractors(container, force = false) {\n        return getItemsFromInitializer(container, this.interactors, this._initializers.interactors, force);\n    }\n    getMovers(container, force = false) {\n        return getItemsFromInitializer(container, this.movers, this._initializers.movers, force);\n    }\n    getPathGenerator(type) {\n        return this.pathGenerators.get(type);\n    }\n    getPlugin(plugin) {\n        return this.plugins.find((t) => t.id === plugin);\n    }\n    getPreset(preset) {\n        return this.presets.get(preset);\n    }\n    getShapeDrawer(type) {\n        return this.shapeDrawers.get(type);\n    }\n    getSupportedEffects() {\n        return this.effectDrawers.keys();\n    }\n    getSupportedShapes() {\n        return this.shapeDrawers.keys();\n    }\n    getUpdaters(container, force = false) {\n        return getItemsFromInitializer(container, this.updaters, this._initializers.updaters, force);\n    }\n    init() {\n        if (this._initialized) {\n            return;\n        }\n        this._initialized = true;\n    }\n    async load(params) {\n        const id = params.id ?? `tsparticles${Math.floor(getRandom() * 10000)}`, { index, url } = params, options = url ? await getDataFromUrl({ fallback: params.options, url, index }) : params.options;\n        let domContainer = params.element ?? document.getElementById(id);\n        if (!domContainer) {\n            domContainer = document.createElement(\"div\");\n            domContainer.id = id;\n            document.body.append(domContainer);\n        }\n        const currentOptions = itemFromSingleOrMultiple(options, index), dom = this.dom(), oldIndex = dom.findIndex((v) => v.id.description === id);\n        if (oldIndex >= 0) {\n            const old = this.domItem(oldIndex);\n            if (old && !old.destroyed) {\n                old.destroy();\n                dom.splice(oldIndex, 1);\n            }\n        }\n        let canvasEl;\n        if (domContainer.tagName.toLowerCase() === \"canvas\") {\n            canvasEl = domContainer;\n            canvasEl.dataset[generatedAttribute] = \"false\";\n        }\n        else {\n            const existingCanvases = domContainer.getElementsByTagName(\"canvas\");\n            if (existingCanvases.length) {\n                canvasEl = existingCanvases[0];\n                canvasEl.dataset[generatedAttribute] = \"false\";\n            }\n            else {\n                canvasEl = document.createElement(\"canvas\");\n                canvasEl.dataset[generatedAttribute] = \"true\";\n                domContainer.appendChild(canvasEl);\n            }\n        }\n        if (!canvasEl.style.width) {\n            canvasEl.style.width = \"100%\";\n        }\n        if (!canvasEl.style.height) {\n            canvasEl.style.height = \"100%\";\n        }\n        const newItem = new Container(this, id, currentOptions);\n        if (oldIndex >= 0) {\n            dom.splice(oldIndex, 0, newItem);\n        }\n        else {\n            dom.push(newItem);\n        }\n        newItem.canvas.loadCanvas(canvasEl);\n        await newItem.start();\n        return newItem;\n    }\n    loadOptions(options, sourceOptions) {\n        for (const plugin of this.plugins) {\n            plugin.loadOptions(options, sourceOptions);\n        }\n    }\n    loadParticlesOptions(container, options, ...sourceOptions) {\n        const updaters = this.updaters.get(container);\n        if (!updaters) {\n            return;\n        }\n        for (const updater of updaters) {\n            updater.loadOptions && updater.loadOptions(options, ...sourceOptions);\n        }\n    }\n    async refresh(refresh = true) {\n        if (!refresh) {\n            return;\n        }\n        this.dom().forEach((t) => t.refresh());\n    }\n    removeEventListener(type, listener) {\n        this._eventDispatcher.removeEventListener(type, listener);\n    }\n    setOnClickHandler(callback) {\n        const dom = this.dom();\n        if (!dom.length) {\n            throw new Error(`${errorPrefix} can only set click handlers after calling tsParticles.load()`);\n        }\n        for (const domItem of dom) {\n            domItem.addClickHandler(callback);\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}