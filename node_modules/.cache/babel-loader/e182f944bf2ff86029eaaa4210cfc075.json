{"ast":null,"code":"import { executeOnSingleOrMultiple, getRangeMax, isInArray, itemFromSingleOrMultiple, loadFont } from \"@tsparticles/engine\";\nexport const validTypes = [\"emoji\"];\nconst defaultFont = '\"Twemoji Mozilla\", Apple Color Emoji, \"Segoe UI Emoji\", \"Noto Color Emoji\", \"EmojiOne Color\"';\nexport class EmojiDrawer {\n  constructor() {\n    this._emojiShapeDict = new Map();\n  }\n  destroy() {\n    for (const [, emojiData] of this._emojiShapeDict) {\n      emojiData instanceof ImageBitmap && emojiData?.close();\n    }\n  }\n  draw(data) {\n    const {\n        context,\n        particle,\n        radius,\n        opacity\n      } = data,\n      emojiData = particle.emojiData;\n    if (!emojiData) {\n      return;\n    }\n    context.globalAlpha = opacity;\n    context.drawImage(emojiData, -radius, -radius, radius * 2, radius * 2);\n    context.globalAlpha = 1;\n  }\n  async init(container) {\n    const options = container.actualOptions;\n    if (validTypes.find(t => isInArray(t, options.particles.shape.type))) {\n      const promises = [loadFont(defaultFont)],\n        shapeOptions = validTypes.map(t => options.particles.shape.options[t]).find(t => !!t);\n      if (shapeOptions) {\n        executeOnSingleOrMultiple(shapeOptions, shape => {\n          shape.font && promises.push(loadFont(shape.font));\n        });\n      }\n      await Promise.all(promises);\n    }\n  }\n  particleDestroy(particle) {\n    delete particle.emojiData;\n  }\n  particleInit(container, particle) {\n    if (!particle.emojiData) {\n      const shapeData = particle.shapeData;\n      if (!shapeData?.value) {\n        return;\n      }\n      const emoji = itemFromSingleOrMultiple(shapeData.value, particle.randomIndexData),\n        font = shapeData.font ?? defaultFont;\n      if (!emoji) {\n        return;\n      }\n      const key = `${emoji}_${font}`,\n        existingData = this._emojiShapeDict.get(key);\n      if (existingData) {\n        particle.emojiData = existingData;\n        return;\n      }\n      const canvasSize = getRangeMax(particle.size.value) * 2;\n      let emojiData;\n      if (typeof OffscreenCanvas !== \"undefined\") {\n        const canvas = new OffscreenCanvas(canvasSize, canvasSize),\n          context = canvas.getContext(\"2d\");\n        if (!context) {\n          return;\n        }\n        context.font = `400 ${getRangeMax(particle.size.value) * 2}px ${font}`;\n        context.textBaseline = \"middle\";\n        context.textAlign = \"center\";\n        context.fillText(emoji, getRangeMax(particle.size.value), getRangeMax(particle.size.value));\n        emojiData = canvas.transferToImageBitmap();\n      } else {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = canvasSize;\n        canvas.height = canvasSize;\n        const context = canvas.getContext(\"2d\");\n        if (!context) {\n          return;\n        }\n        context.font = `400 ${getRangeMax(particle.size.value) * 2}px ${font}`;\n        context.textBaseline = \"middle\";\n        context.textAlign = \"center\";\n        context.fillText(emoji, getRangeMax(particle.size.value), getRangeMax(particle.size.value));\n        emojiData = canvas;\n      }\n      this._emojiShapeDict.set(key, emojiData);\n      particle.emojiData = emojiData;\n    }\n  }\n}","map":{"version":3,"names":["executeOnSingleOrMultiple","getRangeMax","isInArray","itemFromSingleOrMultiple","loadFont","validTypes","defaultFont","EmojiDrawer","constructor","_emojiShapeDict","Map","destroy","emojiData","ImageBitmap","close","draw","data","context","particle","radius","opacity","globalAlpha","drawImage","init","container","options","actualOptions","find","t","particles","shape","type","promises","shapeOptions","map","font","push","Promise","all","particleDestroy","particleInit","shapeData","value","emoji","randomIndexData","key","existingData","get","canvasSize","size","OffscreenCanvas","canvas","getContext","textBaseline","textAlign","fillText","transferToImageBitmap","document","createElement","width","height","set"],"sources":["/Users/josh/Desktop/Portfolio/jjgarcilazo.github.io/node_modules/@tsparticles/shape-emoji/browser/EmojiDrawer.js"],"sourcesContent":["import { executeOnSingleOrMultiple, getRangeMax, isInArray, itemFromSingleOrMultiple, loadFont, } from \"@tsparticles/engine\";\nexport const validTypes = [\"emoji\"];\nconst defaultFont = '\"Twemoji Mozilla\", Apple Color Emoji, \"Segoe UI Emoji\", \"Noto Color Emoji\", \"EmojiOne Color\"';\nexport class EmojiDrawer {\n    constructor() {\n        this._emojiShapeDict = new Map();\n    }\n    destroy() {\n        for (const [, emojiData] of this._emojiShapeDict) {\n            emojiData instanceof ImageBitmap && emojiData?.close();\n        }\n    }\n    draw(data) {\n        const { context, particle, radius, opacity } = data, emojiData = particle.emojiData;\n        if (!emojiData) {\n            return;\n        }\n        context.globalAlpha = opacity;\n        context.drawImage(emojiData, -radius, -radius, radius * 2, radius * 2);\n        context.globalAlpha = 1;\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (validTypes.find((t) => isInArray(t, options.particles.shape.type))) {\n            const promises = [loadFont(defaultFont)], shapeOptions = validTypes\n                .map((t) => options.particles.shape.options[t])\n                .find((t) => !!t);\n            if (shapeOptions) {\n                executeOnSingleOrMultiple(shapeOptions, (shape) => {\n                    shape.font && promises.push(loadFont(shape.font));\n                });\n            }\n            await Promise.all(promises);\n        }\n    }\n    particleDestroy(particle) {\n        delete particle.emojiData;\n    }\n    particleInit(container, particle) {\n        if (!particle.emojiData) {\n            const shapeData = particle.shapeData;\n            if (!shapeData?.value) {\n                return;\n            }\n            const emoji = itemFromSingleOrMultiple(shapeData.value, particle.randomIndexData), font = shapeData.font ?? defaultFont;\n            if (!emoji) {\n                return;\n            }\n            const key = `${emoji}_${font}`, existingData = this._emojiShapeDict.get(key);\n            if (existingData) {\n                particle.emojiData = existingData;\n                return;\n            }\n            const canvasSize = getRangeMax(particle.size.value) * 2;\n            let emojiData;\n            if (typeof OffscreenCanvas !== \"undefined\") {\n                const canvas = new OffscreenCanvas(canvasSize, canvasSize), context = canvas.getContext(\"2d\");\n                if (!context) {\n                    return;\n                }\n                context.font = `400 ${getRangeMax(particle.size.value) * 2}px ${font}`;\n                context.textBaseline = \"middle\";\n                context.textAlign = \"center\";\n                context.fillText(emoji, getRangeMax(particle.size.value), getRangeMax(particle.size.value));\n                emojiData = canvas.transferToImageBitmap();\n            }\n            else {\n                const canvas = document.createElement(\"canvas\");\n                canvas.width = canvasSize;\n                canvas.height = canvasSize;\n                const context = canvas.getContext(\"2d\");\n                if (!context) {\n                    return;\n                }\n                context.font = `400 ${getRangeMax(particle.size.value) * 2}px ${font}`;\n                context.textBaseline = \"middle\";\n                context.textAlign = \"center\";\n                context.fillText(emoji, getRangeMax(particle.size.value), getRangeMax(particle.size.value));\n                emojiData = canvas;\n            }\n            this._emojiShapeDict.set(key, emojiData);\n            particle.emojiData = emojiData;\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}